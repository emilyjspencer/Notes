### Node and Express

* **Node** is a open source server environment
* Uses JS on the server

* **Express** is a Node framework which helps to make the process of building a server, easier.
* It can be built in pure Node.js, but Express speeds this process up.

**Installing Node:**
```html
npm install node
```

**Installing Express**
```html
npm install express --save
```

* **To create a server**

Set up project
``html
npm init
```

* This creates a package.json file which holds some basic information about the application 
as well as metadata about the app
* It also manages the dependencies of the application

**Create a server.js file**
* Require the express library
```html
const express = require(‘express’);
```

* Initialize the server by calling the express() function
- This creates an Express application
```html
const app = express();
```

* Start listening for potential requests by seting a port for the server to listen to
and utilizing the built-in method **listen()**
* The **listen() method takes two args
1. The port
2. Callback function telling it what to do once the server is running

What the whole server.js file might look like before adding routes etc

```html
const express = require('express');
const app = express();

app.listen(3000, function () {
    console.log('Server is listening on port 3000. Ready to accept requests!');
  });
```
Start the server with the name of the file:

```html
node app.js
```

* Once the server has been built, it needs to be communicated with, via handler functions.
* Handler functions receive requests and handle them - hence the name
* The handler() function always takes **request and response objects** and sends the response back to the 
client along with some information

* The **get()** method is used to define a handler function in Express. 
* It takes two parameters: 
the **endpoint** at which to trigger an action 
the handler function that tells it exactly what to do. 

```html
app.get("/", function (req, res) {
    res.send("Create");
});
```

This tells the server to response with 'Create', when users try to access the home page

* The handler function uses the **send()** method to send a message back to the client
* This updates the response object with the message

```html
const express = require('express');
const app = express();

app.get("/", function (req, res) {
    res.send("Hi");
  });

app.listen(3000, function () {
    console.log('Server is listening on port 3000. Ready to accept requests!');
});
```

#### Routing

Through the use of endpoints, the server can send different responses 
for different requests.

NB - no hot-reloading. The server must be stopped and re-started after any changes

